#!/bin/sh
#
# This is an attempt to write a shell script which creates an image file
# holding a minimal FreeDOS installation. Writing this image file onto a USB
# flash drive should boot right into FreeDOS. This could be used to update
# firmware, play old DOS games or whatever.

# This version was tested on Debian GNU/Linux 9.2 (stretch). The
# written image was bootable.

# some default values that can be overriden with command line arguments
IMAGE_SIZE=500
OVERLAY_PATH="overlay"
IMAGE_NAME=usbimage-${IMAGE_SIZE}M.img
FDOS_ISO="${OVERLAY_PATH}/boot/FD12CD.iso"

# system dependent commands
SUDO_CMD="sudo"
MOUNT_CMD="${SUDO_CMD} mount"
MOUNT_FLAGS="-o uid=`id -u`"
UMOUNT_CMD="${SUDO_CMD} umount"
PARTED_CMD="/sbin/parted"
PARTED_FLAGS="-a optimal"
KPARTX_CMD="${SUDO_CMD} /sbin/kpartx"
KPARTX_FLAGS="-av"
MKFS_CMD="${SUDO_CMD} mkfs"
MKFS_ARGS="-t msdos -F 16 -n FREEDOS"
SYSLINUX_CMD="${SUDO_CMD} syslinux"
SYSLINUX_MEMDISK="/usr/lib/syslinux/memdisk"
SYSLINUX_PATH="/usr/lib/syslinux/modules/bios"
SYSLINUX_MODULES="chain.c32 libcom32.c32 libutil.c32 hdt.c32 libgpl.c32 libmenu.c32"

# set later
FDOS_DIR=""
FDOS_BASE=""
FDOS_SYSLNXX=""
# ---

usage() {
    echo "Usage:"
    echo "\t$0 [-a overlay] [-i isofile] [-s imagesize] [-t workdir] [-n] [-v] [-h] [-o imagename]"
    echo "\t"
    echo "\t-a overlay\tRecursively copy files from overlay path onto image."
    echo "\t-i isofile\tLocation of FreeDOS 1.1 ISO file. (default: ${FDOS_ISO})"
    echo "\t-s imagesize\tSize of image file in Megabytes. (default: ${IMAGE_SIZE})"
    echo "\t-t workdir\tTemporary directory. (default: use mktemp)"
    echo "\t-o imagename\tName of image file to write. (default: usbimage-imagesizeM.img)"
    echo "\t-n\t\tDo not clean up after writing image."
    echo "\t-v\t\tBe verbose."
    echo "\t-h\t\tDisplay this help message, then exit."
    exit 0
}

msg() {
    if [ $VERBOSE ]; then
        echo " ==> $1"
    fi
}

die() {
    echo " !!! ERROR: $1"
    cleanup
    exit 1
}

check_dependencies() {
    ## check operating system
    OS=`uname`
    if [ "$OS" = "Linux" ]; then
        msg "OS: Linux"
    elif [ "$OS" = "FreeBSD" ]; then
        msg "OS: FreeBSD"
        die "FreeBSD is not yet supported. Sorry."
    else
        die "Unknown operating system."
    fi

    ## TODO: check external tools
    # syslinux, awk, kpartx, sudo?
}


make_image_devicename() {
    if [ $OS = "Linux" ]; then
        # get loopdevice from partition
        LOOPDEV_RAW=`${KPARTX_CMD} ${KPARTX_FLAGS} "${IMAGE_NAME}"`
        if [ $? -ne 0 ]; then
            die "kpartx returned errorcode > 0."
        fi
        LOOPDEV=`echo $LOOPDEV_RAW | awk '{ print "/dev/mapper/"$3 }'`
        msg "kpartx returned '${LOOPDEV_RAW}', using '${LOOPDEV}'"
        sleep 3     # -> http://freedos.chtaube.eu/?p=17
        [ $LOOPDEV ] || die "Missing device name from kpartx."
        [ -e $LOOPDEV ] || die "Device name does not exist."
    elif [ $OS = "FreeBSD" ]; then
        die "FreeBSD image mount not yet implemented. Sorry."
        # TODO: see mdconfig(8)
    fi
}


copy_overlay() {
    if [ $OVERLAY_PATH ]; then
        msg "Copying files from overlay ${OVERLAY_PATH}..."
        cp -RL "${OVERLAY_PATH}"/* "${WORK}/image/"
    fi
}

cleanup() {
    if [ $NOCLEANUP ]; then
        msg "Doing no cleanup upon users request."
        msg "Please unmount filesystems ${WORK}/{iso,image} and then remove ${WORK} on your own."
    else
        msg "Cleaning up..."
        if [ $is_mounted_iso ]; then
            #msg "Unmounting ${WORK}/iso"
            $UMOUNT_CMD "${WORK}/iso"
        fi
        if [ $is_mounted_image ]; then
            #msg "Unmounting ${WORK}/image"
            $UMOUNT_CMD "${WORK}/image"
        fi
        # delete kpartx loop device
        ${KPARTX_CMD} -d "${IMAGE_NAME}"
        #msg "Removing ${WORK} ..."
        # We need to fix permissions, otherwise rm -rf fails.
        chmod -R u+w "${WORK}"
        rm -rf -- "${WORK}"
    fi
}

# =====================================================================

## check command line arguments
while getopts "i:o:s:t:hnv" opt
do
    case $opt in
        a)  OVERLAY_PATH=$OPTARG
            ;;
        i)  FDOS_ISO=$OPTARG
            ;;
        o)  IMAGE_NAME=$OPTARG
            ;;
        s)  IMAGE_SIZE=$OPTARG
            ;;
        t)  WORK=$OPTARG
            ;;
        h)  usage
            ;;
        n)  NOCLEANUP="yes"
            ;;
        v)  VERBOSE="yes"
            ;;
    esac
done

check_dependencies

### create temporary work dir
if [ -z $WORK ]; then
    WORK=`mktemp -d`
else
    [ -d "${WORK}" ] \
        || mkdir -p "${WORK}" \
        || die "Creating '${WORK}' failed."
fi

msg "Creating temporary directories in ${WORK} ..."
for subdir in image iso temp syslinux
do
    [ -d "${WORK}/${subdir}" ] \
        || mkdir "${WORK}/${subdir}" \
        || die "Creating '${WORK}/${subdir}' failed."
done


### create image file
msg "Creating image file, ${IMAGE_SIZE}M bytes..."
dd if=/dev/zero of="${IMAGE_NAME}" bs=1M count=${IMAGE_SIZE} \
    || die "Creating image file failed"

### partition image file
msg "Running parted to create partition table..."
${PARTED_CMD} ${PARTED_FLAGS} "${IMAGE_NAME}" <<EOF
unit %
mklabel msdos
mkpart primary fat16 0 100%
set 1 boot on
q
EOF
if [ $? -ne 0 ]; then
    die "parted returned errorcode > 0."
fi

make_image_devicename "${IMAGE_NAME}" "${WORK}/image"
## returns: LOOPDEV

msg "Making filesystem on ${LOOPDEV}"
# make filesystem
${MKFS_CMD} ${MKFS_ARGS} "${LOOPDEV}" \
    || die "Could not make filesystem."
# install syslinux
msg "Installing syslinux..."
${SYSLINUX_CMD} -i ${LOOPDEV} \
    || die "Could not install syslinux bootloader."

msg "Mounting image '${MOUNT_CMD} ${MOUNT_FLAGS} ...'"
# mount image
${MOUNT_CMD} ${MOUNT_FLAGS} "${LOOPDEV}" "${WORK}/image" \
    && is_mounted_image="yes" \
    || die "Failed mounting image file."
msg "Creating directory structure on image..."
for subdir in fdos boot
do
    mkdir -p "${WORK}/image/${subdir}"
done

msg "Mounting FreeDOS ISO"
# mount FreeDOS ISO
${MOUNT_CMD} ${MOUNT_FLAGS} -o ro,loop "${FDOS_ISO}" "${WORK}/iso" \
    && is_mounted_iso="yes" \
    || die "Failed mounting FreeDOS ISO-file."

msg "Unzipping files to temporary location..."

# The directory structure for the FreeDOS ISO changed between 1.1 and
# 1.2. Here we support either.
#
# FreeDOS 1.1 ISO
if [ -d "${WORK}/iso/freedos/packages/base" ]; then
    FDOS_DIR="${WORK}/iso/freedos/packages"
    FDOS_BASE="${FDOS_DIR}/base"
    FDOS_SYSLNXX="${FDOS_DIR}/boot/syslnxx.zip"
# FreeDOS 1.2 ISO
elif [ -d "${WORK}/iso/BASE" ]; then
    FDOS_DIR="${WORK}/iso"
    FDOS_BASE="${FDOS_DIR}/BASE"
    FDOS_SYSLNXX="${FDOS_DIR}/BOOT/SYSLNX.ZIP"
else
    die "Failed to read the FreeDOS ISO."
fi
find "${FDOS_BASE}" -iname '*.zip' -exec \
    unzip -q -LL -n -d "${WORK}/temp" {} \; &&
    unzip -q -LL -n -d "${WORK}/syslinux" "${FDOS_SYSLNXX}" ||
    die "unzip failed."

msg "Copying FreeDOS files to image..."
cp -R "${WORK}"/temp/* "${WORK}/image/fdos/" \
    || die "Copying FreeDOS files failed."

# The kernel filename changed in FreeDOS 1.2
if [ ! -f "${WORK}/image/fdos/bin/kernel.sys" ]; then
    cp "${WORK}/image/fdos/bin/kernl386.sys" \
        "${WORK}/image/fdos/bin/kernel.sys"
fi

msg "Copying syslinux modules..."
if [ ! -z ${SYSLINUX_MEMDISK} ]; then
    cp "${SYSLINUX_MEMDISK}" "${WORK}/image/boot/" \
        || die "Copying syslinux memdisk failed."
fi
for slmodule in $SYSLINUX_MODULES
do
    cp "${SYSLINUX_PATH}/${slmodule}" "${WORK}/image/boot/" \
        || die "Copying syslinux module <${slmodule}> failed."
done

copy_overlay

cleanup
